name: Deploy para AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
    steps:
      - name: Criar perfil AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Checkout código
        uses: actions/checkout@v2

      - name: Instalar Terraform
        run: |
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install terraform

      - name: Inicializar Terraform
        run: terraform init -var="DB_USERNAME=${DB_USERNAME}" -var="DB_PASSWORD=${DB_PASSWORD}"

      - name: Formatar Terraform
        run: terraform fmt

      - name: Validar Terraform
        run: terraform validate

      - name: Planejar configuração do Terraform
        run: terraform plan -var="DB_USERNAME=${DB_USERNAME}" -var="DB_PASSWORD=${DB_PASSWORD}"

      - name: Aplicar configuração do Terraform
        run: terraform apply -auto-approve -var="DB_USERNAME=${DB_USERNAME}" -var="DB_PASSWORD=${DB_PASSWORD}"

      - name: Saída do estado do Terraform
        run: terraform output

      - name: Destruir recursos em caso de falha
        if: failure()
        run: terraform destroy -auto-approve -var="DB_USERNAME=${DB_USERNAME}" -var="DB_PASSWORD=${DB_PASSWORD}"
